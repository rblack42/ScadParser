#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class SCADBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class SCADParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=SCADBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._program_()
        self._check_eof()

    @tatsumasu()
    def _program_(self):  # noqa
        with self._optional():
            self._includelist_()
        self._stmtlist_()

    @tatsumasu()
    def _includelist_(self):  # noqa

        def block0():
            self._include_()
            self.name_last_node('@')
        self._closure(block0)

    @tatsumasu()
    def _include_(self):  # noqa
        self._token('include')
        self._token('<')
        self._filename_()
        self.name_last_node('file')
        self._token('>')
        self._define(
            ['file'],
            []
        )

    @tatsumasu()
    def _stmtlist_(self):  # noqa

        def block0():
            self._statement_()
            self.name_last_node('@')
        self._positive_closure(block0)

    @tatsumasu()
    def _statement_(self):  # noqa
        self._declaration_()

    @tatsumasu()
    def _declaration_(self):  # noqa
        self._IDENT_()
        self._token('=')
        self._expression_()
        self._token(';')

    @tatsumasu()
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
                self._token('+')
                self._cut()
                self._term_()
            with self._option():
                self._expression_()
                self._token('-')
                self._cut()
                self._term_()
            with self._option():
                self._term_()
            self._error(
                'expecting one of: '
                '<expression> <term> <factor>'
            )

    @tatsumasu()
    @leftrec
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._term_()
                self._token('*')
                self._cut()
                self._factor_()
            with self._option():
                self._term_()
                self._token('/')
                self._cut()
                self._factor_()
            with self._option():
                self._factor_()
            self._error(
                'expecting one of: '
                "<term> <factor> '(' <number> <IDENT>"
            )

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self._cut()
                self._expression_()
                self._token(')')
            with self._option():
                self._number_()
            with self._option():
                self._IDENT_()
            self._error(
                'expecting one of: '
                "'(' <fract> <int> <number> [_a-zA-z][_a-"
                'zA-Z0-9]+ <IDENT>'
            )

    @tatsumasu()
    def _number_(self):  # noqa
        with self._choice():
            with self._option():
                self._fract_()
            with self._option():
                self._int_()
            self._error(
                'expecting one of: '
                '\\d+\\.\\d+ <fract> \\d+ <int>'
            )

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern('\\d+')

    @tatsumasu()
    def _fract_(self):  # noqa
        self._pattern('\\d+\\.\\d+')

    @tatsumasu()
    def _IDENT_(self):  # noqa
        self._pattern('[_a-zA-z][_a-zA-Z0-9]+')

    @tatsumasu()
    def _filename_(self):  # noqa
        self._pattern('[a-zA-Z\\.-_0-9\\/\\\\]+')


class SCADSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def program(self, ast):  # noqa
        return ast

    def includelist(self, ast):  # noqa
        return ast

    def include(self, ast):  # noqa
        return ast

    def stmtlist(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def declaration(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast

    def fract(self, ast):  # noqa
        return ast

    def IDENT(self, ast):  # noqa
        return ast

    def filename(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = SCADParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, SCADParser, name='SCAD')
    data = asjson(ast)
    print(json.dumps(data, indent=2))

